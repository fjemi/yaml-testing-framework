todo:
- TODO: Add support for user defined logic (example, run_test_for_*) following the example for assertions
- TODO: Add logic for testing APIs
- TODO: Make timestamps a list and append timestamp at each logical operation
- TODO: Add switcher for unpacking based on value and caster in 'execute_test'
- TODO: Add logic for safe loading or regular loading data from yaml files -> configuration safe_load=true
- TODO: Add logic to exclude specified modules from being imported as resources; help prevent errors caused by circular references
- TODO: Add wrapper logic back in for external libraries
- TODO: Consolidate duplicate code for sync and async functions -> https://stackoverflow.com/questions/27290656/should-i-use-two-asyncio-event-loops-in-one-program/27298880#27298880


globals:
  resources:
  - ${ROOT_DIR}/assertions/app.py


tests:
- function: handle_module
  description: >
    Returns the module at a specified
    location
  tests:
  - description: Module location is undefined
    arguments:
      module: null
      module_route: module_route
    assertions:
    - method: assertions.app.assert_equals
      expected:
        module: ''
  - description: Module location doesn't exist
    arguments:
      module: module
      module_route: module_route
    assertions:
    - method: assertions.app.assert_equals
      expected:
        module: ''
  - description: >
      Module argument is a list containing the
      an existing location
    arguments:
      module:
      - ${ROOT_DIR}/main/test_resources/app/app.py
      module_route: .main.test_resources.app
    assertions:
    - method: assertions.app.assert_type
      field: module
      expected: module
    - method: assertions.app.assert_equals
      field: module.__name__
      expected: .main.test_resources.app
  - description: Module location exists
    arguments:
      module: ${ROOT_DIR}/main/test_resources/app/app.py
      module_route: .main.test_resources.app
    assertions:
    - method: assertions.app.assert_type
      field: module
      expected: module
    - method: assertions.app.assert_equals
      field: module.__name__
      expected: .main.test_resources.app
- function: handle_resources
  description: Loads resource modules into the module to test
  cast_arguments:
  - caster: test_resources.app.app.module_resource
    field: module
  tests:
  - description: Undefined arguments
    arguments:
      module: null
      resources: null
    assertions:
    - method: assertions.app.assert_equals
      expected:
        resources: null
        module: null
  - description: >
      Defined arguments. Resources is a list containing the locations of an existing
      modules, a non-existing module, and a non-python module
    arguments:
      module: module
      resources:
      - does_not_exist.py
      - ${ROOT_DIR}/main/test_resources/app/example_b.js
      - ${ROOT_DIR}/main/test_resources/app/example_b.py
    assertions:
    - method: assertions.app.assert_equals
      field: resources
      expected: null
    - method: assertions.app.assert_type
      field: module
      expected: module
    - method: assertions.app.assert_equals
      field: module.__name__
      expected: main.test_resources.app.module
    - method: assertions.app.assert_type
      field: module.example_b
      expected: module
    - method: assertions.app.assert_equals
      field: module.example_b.__file__
      expected: ${ROOT_DIR}/main/test_resources/app/example_b.py
- function: get_function_output
  description: Returns the result of running a function with arguments
  cast_arguments:
  - caster: test_resources.app.app.get_function_output_resource
  tests:
  - description: Undefined arguments
    arguments:
      function: null
      arguments: null
    assertions:
    - method: assertions.app.assert_equals
      field: output
      expected: null
    - method: assertions.app.assert_type
      field: exception
      expected: TypeError
  - description: Defined arguments
    arguments:
      function: function
      arguments: {}
    assertions:
    - method: assertions.app.assert_equals
      expected:
        exception: null
        output: output
- function: get_function
  description: Returns an existing function to test
  cast_arguments:
  - caster: test_resources.app.app.module_resource
    field: module
  tests:
  - description: Undefined arguments
    arguments: {}
    assertions:
    - method: assertions.app.assert_equals
      expected:
        function: null
  - description: Defined arguments
    arguments:
      function: example_function
      module: example_a
      module_route: module_route
    assertions:
    - method: assertions.app.assert_type
      field: function
      expected: function
    - method: assertions.app.assert_equals
      field: function.__name__
      expected: example_function
- function: handle_id
  description: Returns the ID of a test
  cast_arguments:
  - caster: test_resources.app.handle_id_resource
  tests:
  - description: Undefined arguments
    arguments:
      function: null
      module: null
      description: description
      # id: id
    assertions:
    - method: assertions.app.assert_equals
      expected:
        module: ''
        function: ''
        description:
        - description
  - description: Defined arguments
    arguments:
      function: example_function
      module: module
      description:
      - description_a
      - description_b
      # id: id
    assertions:
    - method: assertions.app.assert_equals
      expected:
        module: module
        function: example_function
        description:
        - description_a
        - description_b
- function: run_test_for_function
  description: >
    Returns the result of running test
    data for a function
  cast_arguments:
  - caster: CONFIG.schema.Test
    field: test
    unpack: true
  - caster: test_resources.app.app.test_resource
    field: test
  cast_output:
  - caster: test_resources.app.app.dc.asdict
  tests: &RUN_TEST_FOR_FUNCTION_TESTS
  - description: Undefined arguments
    arguments: {}
    assertions:
    - method: assertions.app.assert_equals
      cast_output:
      - caster: __builtins__.str
        field: exception
      expected:
        arguments: null
        assertions: []
        cast_arguments: null
        cast_group: null
        cast_output: null
        description: []
        environment: null
        exception: '''NoneType'' object is not callable'
        exclude: null
        function: ''
        function_name: null
        id: null
        id_long: null
        id_numeric: null
        id_short: null
        module: ''
        module_route: null
        n: null
        output: null
        patches: null
        project_directory: null
        resources: null
        result: null
        tests: null
        timestamp: null
        yaml: null
  - description: Defined arguments
    arguments:
      test:
        project_directory: ${ROOT_DIR}/main/test_resources/app/add/app.py
        module: ${ROOT_DIR}/main/test_resources/app/add/app.py
        yaml: ${ROOT_DIR}/main/test_resources/app/add/app_test.yaml
        function: add
        function_name: add
        module_route: .main.test_resources.app.add.app
        arguments:
          a: 0
          b: 1
        resources:
        - ${ROOT_DIR}/assertions/app.py
        assertions:
        - method: assertions.app.assert_equals
          expected: 1
    assertions:
    - method: assertions.app.assert_equals
      expected:
        arguments:
          a: 0
          b: 1
        assertions:
        - method: assert_equals
          cast_output: []
          exception: null
          output: 1
          expected: 1
          passed: true
          field: null
        cast_arguments: null
        cast_group: null
        cast_output: null
        description: []
        environment: null
        exception: null
        exclude: null
        function: add
        function_name: add
        id: null
        id_long: null
        id_numeric: null
        id_short: null
        module: ${ROOT_DIR}/main/test_resources/app/add/app.py
        module_route: .main.test_resources.app.add.app
        n: null
        output: 1
        patches: null
        project_directory:  ${ROOT_DIR}/main/test_resources/app/add/app.py
        resources: null
        result: null
        tests: null
        timestamp: null
        yaml: ${ROOT_DIR}/main/test_resources/app/add/app_test.yaml
- function: run_test_handler
  description: Runs a list of tests
  cast_arguments:
  - caster: CONFIG.schema.Test
    field: test
    unpack: true
  - caster: test_resources.app.app.test_resource
    field: test
  cast_output:
  - caster: test_resources.app.app.dc.asdict
  tests:
  - *RUN_TEST_FOR_FUNCTION_TESTS
- function: format_timestamp
  description: Formats a timestamp as a list of timestamps
  tests:
  - description: Undefined timestamp argument
    arguments: {}
    assertions:
    - method: assertions.app.assert_type
      field: timestamp
      expected: list
    - method: assertions.app.assert_length
      field: timestamp
      expected: 1
  # Think about patching time.time() to return 'timestamp' for better test
  - description: timestamp argument is an integer
    arguments:
      timestamp: 1111
    assertions:
    - method: assertions.app.assert_type
      field: timestamp
      expected: list
    - method: assertions.app.assert_length
      expected: 2
      field: timestamp
    - method: assertions.app.assert_item_in_list
      field: timestamp
      expected: 1111
  - description: timestamp argument is an list
    arguments:
      timestamp:
      - 1111
      - 1234
    assertions:
    - method: assertions.app.assert_type
      field: timestamp
      expected: list
    - method: assertions.app.assert_length
      field: timestamp
      expected: 3
    - method: assertions.app.assert_item_in_list
      field: timestamp
      expected: 1111
    - method: assertions.app.assert_item_in_list
      field: timestamp
      expected: 1234
- function: main
  description: >
    Main module of this application. Returns the results of running tests
  cast_output:
  - caster: test_resources.app.app.main_resource
  tests:
  - arguments:
      project_directory: ${ROOT_DIR}/main/test_resources/app/add
      yaml_suffix: _test
      resources_folder_name: resources_folder_name
      timestamp: timestamp
    assertions:
    - method: assertions.app.assert_type
      expected: dict
    - method: assertions.app.assert_equals
      field: arguments
      expected:
        a: 0
        b: 5
    - method: assertions.app.assert_equals
      field: output
      expected: 5
    - method: assertions.app.assert_equals
      field: assertions
      expected:
      - output: 5
        exception: null
        expected: 5
        field: null
        method: assert_equals
        passed: true
        cast_output: []
