TODO:
- Are exceptions being logged correctly to `exception.log`? Doesn't look like it...
- each run should be a separate log file -> timestamp.count.exception or timestamp as the folder
- Create the directories for the logs
- Add log level -> system.normal, system.warning, system.exception. For testing user defined function or user.
- expose set_default and other functions for dumping/loading json
- Only log logs with content


help:
- https://stackoverflow.com/questions/11232230/logging-to-two-files-with-different-settings


resources:
- &RESOURCE
  resource: &RESOURCE_PATH ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/app.py
- &CHECKS
  resource: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/checks/app.py
- &LOG_DIR
  ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/data


tests:
- function: main
  description: Handles logging and outputting to the terminal
  tests:
  - description: Logging is not enabled
    arguments:
      enabled: false
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 0
  - description: Logger has not been created
    patch:
    - method: value
      value: null
      route: LOGGER
    arguments:
      enabled: true
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 0
  - description: Log info
    arguments:
      level: info
      log: log
      debug: True
      enabled: True
      standard_output: true
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 0
  - description: Only logging enabled
    arguments:
      data_:
        a: a
        b: b
      format_: yaml
      level: info
      location: null
      timestamp: timestamp
      standard_output: False
      enabled: True
      log_dir: *LOG_DIR
  - description: Logging and standard output are disabled
    arguments:
      data_:
        a: a
        b: b
      format_: yaml
      level: info
      location: null
      timestamp: timestamp
      standard_output: False
      enabled: False
      log_dir: *LOG_DIR
  - description: Only standard output is enabled
    arguments:
      data_:
        a: a
        b: b
      format_: yaml
      level: info
      location: null
      timestamp: timestamp
      standard_output: True
      enabled: False
      log_dir: *LOG_DIR
- function: format_log_as_sns
  description: Returns the log as a dict if possible
  tests:
  - description: Undefined arguments
    arguments: {}
    checks:
    - << : *CHECKS
      method: check_type
      expected: SimpleNamespace
    - << : *CHECKS
      method: check_equals
      field: __dict__
      expected: {}
  - description: Log is a dictionary
    arguments:
      log:
        message: message
    checks:
    - << : *CHECKS
      method: check_sns
      expected:
        message: message
  - description: Log has attribute `__dict__
    cast_arguments:
    - method: sns
      unpack: True
      field: log
    arguments:
      log:
        message: message
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        message: message
- function: format_as_json
  description: Converts data to JSON
  tests:
  - arguments:
      log: {}
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{}'
  - arguments:
      log:
        key: value
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{"key": "value"}'
  - arguments:
      log:
        a: a
        b: b
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{"a": "a", "b": "b"}'
- function: format_as_yaml
  description: Convert data to YAML
  tests:
  - description: Empty dictionary
    arguments:
      log: {}
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{}

          '
  - description: Dictionary with keys and values
    arguments:
      log:
        a: a
        b: b
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 'a: a

          b: b

          '
- function: format_written_log
  description: Handles formatting log as json or yaml
  cast_arguments:
  - method: sns
    << : *RESOURCE
    unpack: true
  tests:
  - description: Undefined arguments
    arguments:
      format: null
      log: null
      level: null
    checks:
    - << : *CHECKS
      method: check_sns
      expected:
        format: null
        level: null
        log: 'null: null

          '
  - description: Format as YAML
    arguments:
      format: yaml
      level: level
      log:
        message: message
    checks:
    - << : *CHECKS
      method: check_sns
      expected:
        format: yaml
        level: level
        log: "level:\n  message: message\n"
  - description: Format as JSON
    arguments:
      level: level
      format: json
      log:
        message: message
    checks:
    - << : *CHECKS
      method: check_sns
      expected:
        level: level
        format: json
        log: '{"level": {"message": "message"}}'
  - description: Format as YAML
    arguments:
      level: info
      format: yaml
      log:
        message: message
    checks:
    - << : *CHECKS
      method: check_sns
      expected:
        level: info
        format: yaml
        log: "info:\n  message: message\n"
    - << : *CHECKS
      method: check_type
      expected: SimpleNamespace
- function: check_log_for_error
  description: Formats an error in a log
  tests:
  - description: Data is empty
    arguments: {}
    checks:
    - method: check_exception
      << : *CHECKS
      expected: TypeError
  - description: >
      Log does not have the key `error` and level is not error or exception
    arguments:
      data:
        level: level
        log: {}
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        level: level
        log: {}
  - description: >
      Log is empty dictionary and level is error
    arguments:
      data:
        level: error
        log: {}
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        level: error
        log: {}
        standard_output: True
  - description: >
      Log contains error key and level is not exception or error
    arguments:
      data:
        level: level
        log:
          error: error
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        level: level
        log:
          error: error
  - description: >
      Log contains error key and level is not exception or error
    cast_arguments:
    - field: data.log.error
      method: get_exception
      << : *RESOURCE
    arguments:
      data:
        level: level
        log:
          error: exception
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        level: error
    - method: check_equals
      << : *CHECKS
      field: log.error
      expected:
        trace: []
        description: ''
        name: Exception
- function: get_timestamp
  description: Returns a timestamp that is seconds since epoch
  tests:
  - arguments: {}
    checks:
    - method: check_type
      << : *CHECKS
      expected: float
- function: get_log_file_location
  description: Creates a log file and returns its location
  tests:
  - description: Log directory environment variable is not set
    patches:
    - route: CONFIG.environment.LOG_DIR
      method: value
      value: null
    arguments:
      root_directory: root
      project_path: root/project
    checks:
    - method: check_equals
      << : *CHECKS
      expected: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/.logs/root.project.log
  - description: Log directory environment variable is set
    patches:
    - route: CONFIG.environment.LOG_DIR
      method: value
      value: .logs
    arguments:
      root_directory: root
      project_path: root/project
    checks:
    - method: check_equals
      << : *CHECKS
      expected: .logs/root.project.log
- function: get_logger
  description: Returns an instance of a Logger tied to the location of a log file
  tests:
  # - description: Location is undefined
  #   arguments:
  #     location: null
  #   checks:
  #   - method: check_exception
  #     << : *CHECKS
  #     expected: TypeError
  - description: Location is defined
    arguments:
      location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/data/log_file.log
    checks:
    - method: check_type
      << : *CHECKS
      expected: Logger
    - method: check_equals
      << : *CHECKS
      field: name
      expected: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/data/log_file.log
- function: create_logger
  description: >
    Creates the directory to store logs for each run of the app. The
    format of the directory's path is in this format: directory/.logs/timestamp
  tests:
  - description: Undefined arguments
    arguments:
      logging_flag: null
      project_path: null
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        status: 0
  - description: Logging is not enabled
    arguments:
      logging_flag: False
      project_path: null
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        status: 0
  - description: Logging is enabled
    arguments:
      logging_flag: true
      project_path: project_path
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        status: 1
- function: format_exception_and_trace
  description: Formats an exception and its trace
  cast_arguments:
  - method: get_exception
    << : *RESOURCE
    field: exception
  tests:
  - description: Undefined arguments
    arguments:
      exception: null
    checks:
    - method: check_exception
      << : *CHECKS
      expected: AttributeError
  - description: Runtime error
    arguments:
      exception: runtime_error
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
        description: runtime_error
        trace: []
        name: RuntimeError
  - description: Type error
    arguments:
      exception: type_error
    checks:
    - method: check_equals
      << : *CHECKS
      expected:
        description: ''
        trace: []
        name: TypeError
- function: write_to_log
  description: Writes a log to a file
  cast_arguments:
  - method: sns
    << : *RESOURCE
    field: data
    unpack: true
  tests:
  - description: Data is empty
    arguments:
      data: {}
    checks:
    - method: check_exception
      << : *CHECKS
      expected: AttributeError
  - description: Data is non-empty
    arguments:
      data:
        level: level
        log: log
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 1
- function: write_to_cli
  description: Prints a log to the CLI
  cast_arguments:
  - method: sns
    << : *RESOURCE
    unpack: true
  tests:
  - description: Standard output is undefined
    arguments:
      standard_output: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 0
  - description: Standard output is false
    arguments:
      standard_output: false
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 0
  - description: Standard output is true
    arguments:
      standard_output: true
      log: log
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 1
