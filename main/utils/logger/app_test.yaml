TODO:
- Are exceptions being logged correctly to `exception.log`? Doesn't look like it...
- each run should be a separate log file -> timestamp.count.exception or timestamp as the folder
- Create the directories for the logs
- Add log level -> system.normal, system.warning, system.exception. For testing user defined function or user.
- Unique name for modules when patching or running tests in multiple threads, this will prevent patches from being overridden/shared between tests
- Assign test key, timestamp or unique id for each test
- expose set_default and other functions for dumping/loading json
- Check for duplication between logger and independent
- Only log logs with content


help:
- https://stackoverflow.com/questions/11232230/logging-to-two-files-with-different-settings


log_dir: &LOG_DIR ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/data


resources:
- &RESOURCE
  module: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/app.py
- &CHECKS
  module: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/checks/app.py


tests:
- function: main
  description: Handles logging and outputting to the terminal
  tests:
  - description: Logging is not enabled
    arguments:
      enabled: false
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 0
  - description: Logger has not been created
    patch:
    - method: value
      value: null
      route: LOGGER
    arguments:
      enabled: true
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 0
  # - description: Log info
  #   arguments:
  #     level: info
  #     log: log
  #     debug: True
  #     enabled: True
  #     standard_output: true
  #   checks:
  #   - method: check_equals
  #     << : *CHECKS
  #     expected: 1
  # - description: Only logging enabled
  #   arguments:
  #     data_:
  #       a: a
  #       b: b
  #     format_: yaml
  #     level: info
  #     location: null
  #     timestamp: timestamp
  #     standard_output: False
  #     enabled: True
  #     log_dir: *LOG_DIR
  # - description: Logging and standard output are disabled
  #   arguments:
  #     data_:
  #       a: a
  #       b: b
  #     format_: yaml
  #     level: info
  #     location: null
  #     timestamp: timestamp
  #     standard_output: False
  #     enabled: False
  #     log_dir: *LOG_DIR
  # - description: Only standard output is enabled
  #   arguments:
  #     data_:
  #       a: a
  #       b: b
  #     format_: yaml
  #     level: info
  #     location: null
  #     timestamp: timestamp
  #     standard_output: True
  #     enabled: False
  #     log_dir: *LOG_DIR
# - function: set_default_arguments
#   description: Formats and returns objects that are not JSON serializable
#   cast_arguments:
#   - method: set_default_resource
#     << : *RESOURCE
#     field: object
#   tests:
#   - description: >
#       Return the object cast as a string when kind not defined or object is not
#       an Exception
#     arguments:
#       object: string
#     checks:
#     - method: check_equals
#       << : *CHECKS
#       expected: string
#   - description: Undefined object produces an error
#     arguments:
#       object: null
#     checks:
#     - method: check_equals
#       << : *CHECKS
#       expected: None
#   - description: When the object is a module, return its location
#     arguments:
#       object: module
#     checks:
#     - method: check_equals
#       << : *CHECKS
#       expected: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/_resources/logger/module.py
#   - description: Object is a function
#     arguments:
#       object: function_
#     checks:
#     - method: check_equals
#       << : *CHECKS
#       expected: function_
#   - description: Object is of type sh`Test`
#     arguments:
#       object: Test
#     checks:
#     - method: check_substring_in_string
#       << : *CHECKS
#       expected: .main.logger._resources.app.Test
#   - description: Object is of type sh`Exception`
#     arguments:
#       object: Exception
#     checks:
#     - method: check_equals
#       << : *CHECKS
#       expected:
#         exception: TypeError
#         description: 'unsupported operand type(s) for +: ''int'' and ''str'''
# - function: set_default
#   description: 
#   tests:
#   - description:
#     arguments:
#     checks:
#     - method: check_equals
#       << : *CHECKS
#       expected: 
- function: format_as_json
  description: Converts data to JSON
  tests:
  - arguments:
      log: {}
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{}'
  - arguments:
      log:
        key: value
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{"key": "value"}'
  - arguments:
      log:
        a: a
        b: b
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{"a": "a", "b": "b"}'
- function: format_as_yaml
  description: Convert data to YAML
  tests:
  - description: Empty dictionary
    arguments:
      log: {}
    checks:
    - method: check_equals
      << : *CHECKS
      expected: '{}

          '
  - description: Dictionary with keys and values
    arguments:
      log:
        a: a
        b: b
    checks:
    - method: check_equals
      << : *CHECKS
      expected: 'a: a

          b: b

          '
- function: get_timestamp
  description: Returns a timestamp that is seconds since epoch
  tests:
  - arguments: {}
    checks:
    - method: check_type
      << : *CHECKS
      expected: float
- function: get_log_file_location
  description: Creates a log file and returns its location
  tests:
  - description: Log directory environment variable is not set
    patches:
    - route: CONFIG.environment.LOG_DIR
      method: value
      value: null
    arguments:
      root_directory: root
      project_path: root/project
    checks:
    - method: check_equals
      << : *CHECKS
      expected: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/.logs/root.project.log
  - description: Log directory environment variable is set
    patches:
    - route: CONFIG.environment.LOG_DIR
      method: value
      value: .logs
    arguments:
      root_directory: root
      project_path: root/project
    checks:
    - method: check_equals
      << : *CHECKS
      expected: .logs/root.project.log
- function: get_logger
  description: Returns an instance of a Logger tied to the location of a log file
  tests:
  # - description: Location is undefined
  #   arguments:
  #     location: null
  #   checks:
  #   - method: check_exception
  #     << : *CHECKS
  #     expected: TypeError
  - description: Location is defined
    arguments:
      location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/data/log_file.log
    checks:
    - method: check_type
      << : *CHECKS
      expected: Logger
    - method: check_equals
      << : *CHECKS
      field: name
      expected: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/logger/resources/data/log_file.log
- function: create_logger
  description: >
    Creates the directory to store logs for each run of the app. The
    format of the directory's path is in this format: directory/.logs/timestamp
  tests:
  - description: Undefined arguments
    arguments:
      logging_enabled: null
      project_path: null
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        status: 0
  - description: Logging is not enabled
    arguments:
      logging_enabled: False
      project_path: null
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        status: 0
  - description: Logging is enabled
    arguments:
      logging_enabled: true
      project_path: project_path
    checks:
    - method: check_sns
      << : *CHECKS
      expected:
        status: 1
