TODO:
- Add test for decorated function and awaitable to ./main/app_test.yaml
- Finalize logging and tests
- Think of moving format_exception_and_trace to logger
- Finish test for the main function. May require a spy.


resource:
- https://stackoverflow.com/questions/5218895/python-nested-functions-variable-scoping


configurations:
  resources:
  - ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/checks/app.py
  - ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py


tests:
- function: convert_string_to_list
  description: Converts a list in YAML string format to a list object
  tests:
  - description: Empty string
    arguments:
      string: ''
    checks:
    - method: checks.app.check_equals
      expected: null
  - description: String in YAML list format
    arguments:
      string: |
        - a
        - b
    checks:
    - method: checks.app.check_equals
      expected:
      - a
      - b
  - description: List object
    arguments:
      string:
      - 1
      - 2
    checks:
    - method: checks.app.check_equals
      expected:
      - 1
      - 2
- function: get_yaml_loader
  description: >
    Returns a YAML Loader (Base, Safe, or Full). Safe is default and can set the
    environment variable YAML_TESTING_FRAMEWORK_YAML_LOADER to a loader to use
  tests:
  - description: SafeLoader is default
    arguments: {}
    checks:
    - method: checks.app.check_equals
      field: __class__.__name__
      expected: type
    - method: checks.app.check_equals
      cast_output:
      - method: __builtins__.str
      expected: "<class 'yaml.loader.SafeLoader'>\n..."
  - description: Environment variable set to loader that doesn't exist
    patches:
    - method: value
      route: CONFIG.environment.YAML_LOADER
      value: DOES_NOT_EXIST
    arguments: {}
    checks:
    - method: checks.app.check_equals
      cast_output:
      - method: __builtins__.str
      expected: "<class 'yaml.loader.SafeLoader'>\n..."
  - description: Environment variable set to Full
    patches:
    - method: value
      route: CONFIG.environment.YAML_LOADER
      value: Full
    arguments: {}
    checks:
    - method: checks.app.check_equals
      cast_output:
      - method: __builtins__.str
      expected: "<class 'yaml.loader.FullLoader'>\n..."
- function: get_yaml_content
  description: >
    Returns content from a YAML file or an empty dictionary if the file does
    not exist
  tests:
  - description: Location is undefined
    arguments:
      location: null
    checks:
    - method: checks.app.check_sns
      expected:
        log: No YAML file at None
    - method: checks.app.check_equals
      field: content
      expected: {}
  - description: Location does not exist
    arguments:
      location: location_does_not_exist
    checks:
    - method: checks.app.check_sns
      expected:
        log: No YAML file at location_does_not_exist
    - method: checks.app.check_equals
      field: content
      expected: {}
  - description: Location is an existing YAML file
    arguments:
      location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.yaml
    checks:
    - method: checks.app.check_equals
      field: content
      expected:
        hello: world
  - description: Content is defined
    arguments:
      content: content
    checks:
    - method: checks.app.check_equals
      field: __dict__
      expected: {}
- function: format_output
  description: Formats output from performing an operation as a dictionary
  tests:
  - description: Output is undefined
    arguments:
      output: null
    checks:
    - method: checks.app.check_equals
      expected: {}
  - description: Output is a dict
    arguments:
      output:
        key: value
    checks:
    - method: checks.app.check_equals
      expected:
        key: value
  - description: Output is a simple name space
    cast_arguments:
    - method: sns
      unpack: true
      field: output
    arguments:
      output:
        field: value
    checks:
    - method: checks.app.check_equals
      expected:
        field: value
  - description: Output is a list
    arguments:
      output: []
    checks:
    - method: checks.app.check_equals
      expected: null
- function: format_exception_and_trace
  description: Formats an exception and its trace
  cast_arguments:
  - method: resource.get_exception
    field: exception
  tests:
  - description: Undefined arguments
    arguments:
      exception: null
    checks:
    - method: checks.app.check_exception
      expected: AttributeError
  - description: Runtime error
    arguments:
      exception: runtime_error
    checks:
    - method: checks.app.check_equals
      expected:
        description: runtime_error
        trace: []
        name: RuntimeError
  - description: Type error
    arguments:
      exception: type_error
    checks:
    - method: checks.app.check_equals
      expected:
        description: 'unsupported operand type(s) for +: ''int'' and ''str'''
        trace:
        - file: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
          line: 68
          name: add
        name: TypeError

# - function: get_log
#   d
# - function: format_log
#   description: >
#     Handles calling the logger where there are log messages, exceptions, or
#     debugging is enabled
#   tests:
#   - description: Undefined arguments
#     arguments: {}
#     checks:
#     - method: checks.app.check_exception
#       expected: AttributeError
#   - description: >
#       Output does not contain log and is not an exception. Debug flag is not
#       true.
#     arguments:
#       operation: operation
#       arguments:
#         a: a
#         b: b
#       timestamps: timestamps
#       output: {}
#     checks:
#     - method: checks.app.check_equals
#       expected:
#         enabled: False
#   - description: >
#       Output contains a log and is not an exception. Debug flag is not true.
#     arguments:
#       operation: operation
#       arguments:
#         a: a
#         b: b
#       timestamps: timestamps
#       output:
#         log: log
#     checks:
#     - method: checks.app.check_equals
#       expected:
#         debug: False
#         standard_output: False
#         format: yaml
#         level: info
#         log:
#           message: log
#           operation: operation
#           timestamps: timestamps
#   - description: Log arguments and output when debug is true
#     cast_arguments:
#     - method: sns
#       unpack: True
#       field: output.log
#     arguments:
#       operation: operation
#       arguments:
#         a: a
#         b: b
#       timestamps:
#         start: 1
#         end: 2
#         runtime_ms: 1
#       output:
#         c: c
#         d: d
#         log:
#           message: message
#           level: warning
#       debug_flag: true
#     checks:
#     - method: checks.app.check_equals
#       expected:
#         debug: true
#         standard_output: true
#         format: yaml
#         level: warning
#         log:
#           arguments:
#             a: a
#             b: b
#           message: message
#           operation: operation
#           output:
#             c: c
#             d: d
#           timestamps:
#             start: 1
#             end: 2
#             runtime_ms: 1
#   - description: Log arguments and output when debug is true
#     cast_arguments:
#     - method: sns
#       unpack: True
#       field: output.log
#     arguments:
#       operation: operation
#       arguments:
#         a: a
#         b: b
#       timestamps: timestamps
#       output:
#         c: c
#         d: d
#         log:
#           message: message
#           level: warning
#       debug_flag: true
#     checks:
#     - method: checks.app.check_equals
#       expected:
#         debug: true
#         standard_output: true
#         format: yaml
#         level: warning
#         log:
#           arguments:
#             a: a
#             b: b
#           message: message
#           operation: operation
#           output:
#             c: c
#             d: d
#           timestamps: timestamps
#   - cast_arguments:
#     - field: output.exception
#       method: resource.get_exception
#     description: >
#       Output contains an exception. Debug flag is not true.
#     arguments:
#       operation: operation
#       arguments:
#         a: a
#         b: b
#       timestamps: timestamps
#       output:
#         exception: exception
#       exception_flag: true
#     checks:
#     - method: checks.app.check_equals
#       expected:
#         debug: False
#         standard_output: true
#         format: yaml
#         level: error
#         log:
#           arguments:
#             a: a
#             b: b
#           exception:
#             description: ''
#             name: Exception
#             trace: []
#           operation: operation
#           timestamps: timestamps

  # # TODO: Need a spy on the logger.main to test this function
  # - description: Log is an exception
  #   arguments:
  #   checks:
  #   - method:
  #     expected:
  # - description: Log is a message
  #   arguments:
  #   checks:
  #   - method:
  #     expected:

- function: get_function_output
  description: >
    Returns the output from calling a function with an unpacked dictionary
  cast_arguments:
  - field: data
    method: sns
    unpack: true
  - field: data.function
    method: resource.get_function
  tests:
  - description: Return expected output from adding two integers
    arguments:
      data:
        function: add
        arguments:
          a: 1
          b: 2
    checks:
    - method: checks.app.check_sns
      field: output
      expected:
        c: 3
    - method: checks.app.check_type
      field: timestamps
      expected: SimpleNamespace
- function: update_data_fields
  description: >
    Updates fields in a data object with values from a dictionary type
  cast_arguments:
  - method: sns
    unpack: True
    field: data
  tests:
  - description: Output and data are empty dictionaries
    arguments:
      data:
        output: {}
        data: {}
    checks:
    - method: checks.app.check_sns
      expected:
        output: {}
        data: {}
  - description: Output is a non-empty dictionary
    arguments:
      data:
        output:
          a: A
          b: B
        data: {}
    checks:
    - method: checks.app.check_sns
      expected:
        data:
          a: A
          b: B
  - description: Output is a non-empty dictionary and data is a simplenamespace
    cast_arguments:
    - field: data.data
      method: sns
      unpack: true
    arguments:
      data:
        output:
          c: C
          d: D
        data: {}
    checks:
    - method: checks.app.check_equals
      field: data.__dict__
      expected:
        c: C
        d: D
- function: get_timestamp
  description: Returns a timestamp; seconds past epoch
  tests:
  - description: Kind is undefined
    arguments:
      kind: null
    checks:
    - method: checks.app.check_type
      expected: float
  - description: Kind is defined as a integer
    arguments:
      kind: int
    checks:
    - method: checks.app.check_type
      expected: int
- function: get_runtime_in_ms
  description: Returns a dict containing start,end, and run times
  cast_arguments:
  - field: timestamps
    method: sns
    unpack: True
  tests:
  - description: Undefined arguments
    arguments:
      timestamps: {}
    checks:
    - method: checks.app.check_exception
      expected: AttributeError
  - description: End and run times should be integers
    arguments:
      timestamps:
        start: 0
    checks:
    - method: checks.app.check_type
      field: end
      expected: float
    - method: checks.app.check_type
      field: runtime_ms
      expected: float
  - patches:
    - route: get_timestamp
      method: callable
      value: 2
    description: End and run times should be integers
    arguments:
      timestamps:
        start: 0
    checks:
    - method: checks.app.check_sns
      expected:
        start: 0
        end: 2
        runtime_ms: 2000
- function: delete_field
  description: Removes an attribute from an object or a key from a dictionary
  tests:
  - description: Remove an attribute from a simple name space
    cast_arguments:
    - field: parent
      method: sns
      unpack: true
    arguments:
      parent:
        field_a: value_a
        field_b: value_b
      field: field_b
    checks:
    - method: checks.app.check_sns
      expected:
        field_a: value_a
        field_b: null
  - description: Remove a key from a dictionary
    arguments:
      parent:
        key_a: value_a
        key_b: value_b
      field: key_b
    checks:
    - method: checks.app.check_equals
      expected:
        key_a: value_a
- function: purge_data_and_output_fields
  description: >
    Removes fields from data and output after an operation has been processed. 
    Fields to remove are listed under the _cleanup key in an operation's output.
  cast_arguments:
  - field: data
    method: sns
    unpack: true
  tests:
  - description: Data and output are empty dictionaries
    arguments:
      data:
        output: {}
        data: {}
    checks:
    - method: checks.app.check_sns
      expected:
        output: {}
        data: {}
  - description: Output contains fields to cleanup
    arguments:
      data:
        output:
          _cleanup:
          - a
          - c
        data:
          a: A
          b: B
          c: C
    checks:
    - method: checks.app.check_sns
      expected:
        output: {}
        data:
          b: B
  - description: >
      Output contains fields to cleanup and data is of type simple name space
    cast_arguments:
    - field: data.data
      method: sns
      unpack: true
    arguments:
      data:
        output:
          _cleanup:
          - 1
          - 2
        data:
          1: 1
          2: 2
          3: 3
    checks:
    - method: checks.app.check_sns
      expected:
        output: {}
        data:
          3: 3
- function: process_operations
  description: >
    Performs a list of operations on data that can be represented as a
    dictionary
  cast_arguments:
  - method: resource.get_locals
    field: functions
  tests:
  - description: Undefined arguments
    arguments:
      operations: null
      data: null
      functions: null
    checks:
    - method: checks.app.check_exception
      expected: TypeError
  - description: Perform operations on a dictionary
    arguments:
      operations:
      - add
      - subtract
      - multiply
      data:
        a: 0
        b: 0
        c: 0
      functions: null
    checks:
    - method: checks.app.check_equals
      expected:
        a: 0
        b: 0
        c: 0
  - cast_arguments:
    - method: sns
      field: data
      unpack: true
    description: Perform operations on a simple name space
    arguments:
      operations:
      - add
      - subtract
      - multiply
      data:
        a: 1
        b: 2
        c: 3
      functions: null
    checks:
    - method: checks.app.check_sns
      expected:
        a: 6
        b: 2
        c: 3
  - description: An exception occurs during an operation
    arguments:
      operations:
      - add
      - subtract
      - multiply
      data:
        a: '0'
        b: 1
        c: '2'
      functions: null
    checks:
    - method: checks.app.check_equals
      cast_output:
      - method: resource.get_exception_name
        field: exception
      expected:
        a: '2'
        b: 1
        c: '2'
        exception: TypeError
  - description: Operations do not exist in dictionary of functions
    arguments:
      operations:
      - does_not_exist_a
      data: {}
      functions: null
    checks:
    - method: checks.app.check_equals
      field: __class__.__name__
      expected: KeyError
- function: format_module_defined_config
  description: >
    Returns SimpleNamespace containing configurations defined in a module
  tests:
  - description: Config is undefined
    arguments:
      config: null
    checks:
    - method: checks.app.check_sns
      expected:
        config: null
        environment: null
        operations: null
    - method: checks.app.check_equals
      field: schema.__dict__
      expected: {}
  - description: Config is an empty dict
    arguments:
      config: {}
    checks:
    - method: checks.app.check_sns
      expected:
        environment: null
        operations: null
    - method: checks.app.check_equals
      field: schema.__dict__
      expected: {}
  - description: Config is a non-empty dict
    arguments:
      config:
        environment:
          A: A
          B: B
        operations:
          main:
          - a
          - b
        schema:
          description: description
          field:
          - name: name
            description: description
            type: type
            default: default
        other: other
    checks:
    - method: checks.app.check_sns
      field: environment
      expected:
        A: A
        B: B
    - method: checks.app.check_equals
      field: operations.__dict__
      expected:
        main:
        - a
        - b
    - method: checks.app.check_equals
      field: other
      expected: other
- function: get_path_of_yaml_associated_with_module
  description: >
    Returns the path to a YAML file associated with a module or null if no YAML
    file exists
  tests:
  - description: Undefined arguments
    arguments: {}
    checks:
    - method: checks.app.check_exception
      expected: TypeError
  - cast_arguments:
    - field: extensions
      method: sns
      unpack: True
    tests:
    - description: Undefined arguments
      arguments:
        module: module/does/not/exist.py
        extensions:
          module:
          - .py
          yaml:
          - .yaml
          - .yml
      checks:
      - method: checks.app.check_equals
        expected: null
    - description: Module and YAML files exist
      arguments:
        module: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
        extensions:
          module:
          - .py
          yaml:
          - .yaml
          - .yml
      checks:
      - method: checks.app.check_equals
        expected: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.yaml
- function: get_decorated_function
  description: >
    Returns the original method for a decorated function or an undecorated
    function
  cast_arguments:
  - method: resource.get_function
    field: function
  tests:
  - description: Undefined arguments
    arguments: {}
    checks:
    - method: checks.app.check_equals
      expected: null
  - description: Function is not decorated
    arguments:
      function: callable
    checks:
    - method: checks.app.check_function
      expected:
        name: callable
        location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
  - description: Function decorated. Original function accessible through __wrapped__.
    arguments:
      function: callable_decorated_wrapped
    checks:
    - method: checks.app.check_function
      expected:
        name: callable_decorated_wrapped
        location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
  - description: Function decorated and decorated. Original function accessible through closure.
    arguments:
      function: callable_decorated_closure
    checks:
    - method: checks.app.check_function
      expected:
        name: callable_decorated_closure
        location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
  - description: Awaitable function decorated. Original function accessible through __wrapped__.
    arguments:
      function: awaitable_decorated_wrapped
    checks:
    - method: checks.app.check_function
      expected:
        name: awaitable_decorated_wrapped
        location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
  - description: Awaitable function decorated. Original function accessible through closure.
    arguments:
      function: awaitable_decorated_closure
    checks:
    - method: checks.app.check_function
      expected:
        name: awaitable_decorated_closure
        location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
- function: get_decorated_function_from_closure
  description: >
    Returns the original method from a decorated function by searching through closure
  tests:
  - description: Undefined arguments
    arguments:
      function: null
    checks:
    - method: checks.app.check_equals
      expected: null
  - cast_arguments:
    - method: resource.get_function
      field: function
    tests:
    - description: Regular function
      arguments:
        function: awaitable
      checks:
      - method: checks.app.check_function
        expected:
          name: awaitable
          location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
    - description: Decorated function
      arguments:
        function: awaitable_decorated_closure
      checks:
      - method: checks.app.check_function
        expected:
          name: awaitable_decorated_closure
          location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
- function: get_decorated_function_from_wrapped
  description: >
    Returns the original method from a decorated by accessing the `__wrapped__` attribute of the decorated function
  tests:
  - description: Undefined arguments
    arguments:
      function: null
    checks:
    - method: checks.app.check_equals
      expected: null
  - cast_arguments:
    - method: resource.get_function
      field: function
    tests:
    - description: Regular function
      arguments:
        function: awaitable
      checks:
      - method: checks.app.check_function
        expected:
          name: awaitable
          location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
    - description: Function decorated and `__wrapped__` attribute is set
      arguments:
        function: awaitable_decorated_wrapped
      checks:
      - method: checks.app.check_function
        expected:
          name: awaitable_decorated_wrapped
          location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
      - method: checks.app.check_equals
        field: __wrapped__
        expected: null
    - description: Function decorated and `__wrapped__` attribute is not set
      arguments:
        function: awaitable_decorated_closure
      checks:
      - method: checks.app.check_function
        expected:
          name: awaitable_decorated_closure
          location: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/main/utils/independent/resource.py
- function: get_model
  description: Returns a model based on a defined schema and available data
  tests:
  - description: Undefined arguments
    arguments: {}
    checks:
    - method: checks.app.check_equals
      field: __dict__
      expected: {}
  - description: Available data is an empty dictionary
    arguments:
      schema:
        a: a
        b: b
      data: {}
    checks:
    - method: checks.app.check_sns
      expected:
        a: a
        b: b
  - description: Available data is non-empty dictionary
    arguments:
      schema:
        a: a
        b: b
        d: d
      data:
        a: A
        b: B
        c: C
    checks:
    - method: checks.app.check_sns
      expected:
        a: A
        b: B
        d: d
  - description: Schema is a simple name space object
    cast_arguments:
    - method: sns
      field: schema
      unpack: true
    arguments:
      schema:
        a: A
        b: B
        c: C
      data:
        a: 1
        b: 2
    checks:
    - method: checks.app.check_sns
      expected:
        a: 1
        b: 2
        c: C
- function: format_config_schema
  description: Parses schema key in YAML content to create models for a schema
  tests:
  - description: Content is empty
    arguments:
      content: {}
      location: location
    checks:
    - method: checks.app.check_sns
      field: log
      expected:
        message: No schema defined in YAML at location location
        level: warning
  - description: Defined schema as dictionary
    arguments:
      content:
        Scheme: &SCHEME
          description: Example scheme
          fields:
          - name: field_a
            description: String field
            type: str
            default: ''
          - name: field_b
            description: Integer field
            type: int
            default: 0
          - name: field_c
            description: List field
            type: list
            default: []
    checks:
    - method: checks.app.check_sns
      field: models.Scheme
      expected:
        field_a: ''
        field_b: 0
        field_c: []
  - description: Defined schema as simple name space
    arguments:
      content:
        Scheme: *SCHEME
    checks:
    - method: checks.app.check_sns
      field: models.Scheme
      expected:
        field_a: ''
        field_b: 0
        field_c: []
- function: get_model_from_scheme
  description: Returns a scheme formatted as a model or dictionary
  tests:
  - description: Undefined arguments
    arguments: {}
    checks:
    - method: checks.app.check_exception
      expected: TypeError
  - description: Scheme with defined fields
    arguments:
      scheme:
        fields: []
    checks:
    - method: checks.app.check_equals
      field: __dict__
      expected: {}
  - description: Scheme with defined fields
    arguments:
      scheme:
        fields:
        - name: a
          default: a
        - name: b
          default: b
    checks:
    - method: checks.app.check_sns
      expected:
        a: a
        b: b
