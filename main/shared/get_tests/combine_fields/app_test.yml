todo:
- TODO: Descriptions don't appear to be combined correctly.
- TODO: Add key to exclude fields from being aggregated or combining global fields defined in configs above. exclude_globals -> [description, arguments, cast_output, etc...]
- TODO: >
    refactor combine fields:
    - fields:
        resources:
          parent: top
          child: bottom  # level
          combination: combine_lists


globals:
  resources:
  - ${ROOT_DIR}/assertions/app.py


tests:
- function: combine_parent_any_and_child_any
  description: >
    Returns a list containing the parent value first and
    child value second
  tests:
  - arguments:
      parent: parent
      child: child
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - parent
      - child
  - arguments:
      parent: order_0
      child: order_1
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - order_0
      - order_1
- function: combine_parent_any_and_child_list
  description: >
    Returns a list, the child value with parent value
    as the first item in the list
  tests:
  - arguments:
      parent: parent
      child:
      - child_a
      - child_b
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - parent
      - child_a
      - child_b
  - arguments:
      parent: order_0
      child:
      - order_1
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - order_0
      - order_1
- function: combine_parent_any_and_child_nonetype
  description: >
    Returns a list, the child value with parent value
    as the first item in the list
  tests:
  - arguments:
      parent: parent
      child: null
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - parent
  - arguments:
      parent: order_0
      child: null
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - order_0
- function: combine_parent_nonetype_and_child_any
  description: >
    Return a list containing the child when parent is null
    and child is any
  tests:
  - arguments:
      parent: null
      child: child_a
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - child_a
  - arguments:
      parent: null
      child: child_b
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - child_b
- function: combine_parent_nonetype_and_child_nonetype
  description: >
    Return an empty list when child and parent are None
  tests:
  - arguments:
      parent: null
      child: null
    assertions:
    - method: assertions.app.assert_equals
      expected: []
- function: combine_parent_nonetype_and_child_list
  description: Return the child
  tests:
  - arguments:
      parent: null
      child:
      - child_a
      - child_b
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - child_a
      - child_b
  - arguments:
      parent: null
      child:
      - child_0
      - child_1
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - child_0
      - child_1
- function: combine_parent_nonetype_and_child_dict
  description: >
    Returns a list containing the child
  tests:
  - arguments:
      parent: null
      child: {}
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - {}
  - arguments:
      parent: null
      child:
        key: value
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - key: value
- function: combine_parent_dict_and_child_dict
  description: >
    Returns a list of
  tests:
  - arguments:
      parent: {}
      child: {}
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - {}
      - {}
  - arguments:
      parent:
        key_a: value_a
      child:
        key_b: value_b
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - key_a: value_a
      - key_b: value_b
- function: combine_parent_dict_and_child_nonetype
  description: >
    Return a list containing the parent
  tests:
  - arguments:
      parent: {}
      child: null
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - {}
  - arguments:
      parent:
        key_a: value_a
        key_b: value_b
      child: child
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - key_a: value_a
        key_b: value_b
- function: combine_parent_dict_and_child_list
  description: >
    Return a list with the parent as the first item, and
    preceding items being the items form the child
  tests:
  - arguments:
      parent: {}
      child:
      - value_c
      - value_d
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - {}
      - value_c
      - value_d
  - arguments:
      parent:
        key_a: value_a
        key_b: value_b
      child:
      - value_c
      - value_d
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - key_a: value_a
        key_b: value_b
      - value_c
      - value_d
- function: combine_parent_list_and_child_nonetype
  description: Combines parent and child values for a field into one value
  tests:
  - arguments:
      parent: []
      child: null
    assertions:
    - method: assertions.app.assert_equals
      expected: []
  - arguments:
      parent:
      - value_c
      - value_d
      child: child
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - value_c
      - value_d
- function: combine_parent_dict_and_child_list
  description: >
    Return a list with the parent as the first item, and
    preceding items being the items form the child
  tests:
  - arguments:
      parent: {}
      child:
      - value_c
      - value_d
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - {}
      - value_c
      - value_d
  - arguments:
      parent:
        key_a: value_a
        key_b: value_b
      child:
      - value_c
      - value_d
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - key_a: value_a
        key_b: value_b
      - value_c
      - value_d
- function: combine_parent_list_and_child_any
  description: >
    Return the parent with the child added to the end
  tests:
  - arguments:
      parent: []
      child: child
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - child
  - arguments:
      parent:
      - value_c
      - value_d
      child: child
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - value_c
      - value_d
      - child
- function: combine_parent_list_and_child_list
  description: >
    Return the parent and child combined
  tests:
  - arguments:
      parent: []
      child: []
    assertions:
    - method: assertions.app.assert_equals
      expected: []
  - arguments:
      parent:
      - value_c
      - value_d
      child:
      - child_a
      - child_b
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - value_c
      - value_d
      - child_a
      - child_b
- function: combine_parent_list_and_child_dict
  description: >
    Return the parent with child added to the end
  tests:
  - arguments:
      parent: []
      child: {}
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - {}
  - arguments:
      parent:
      - value_c
      - value_d
      child:
        key: value
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - value_c
      - value_d
      - key: value
- function: get_kinds
  description: >
    Returns the kinds or types of a parent and
    child objects. Kinds are dict, list, tuple, nonetype;
    otherwise any
  cast_output:
  - caster: __builtins__.dict
  tests:
  - description: String and boolean
    arguments:
      parent: parent
      child: false
    assertions:
    - method: assertions.app.assert_equals
      expected:
        parent: any
        child: any
  - description: Data_Classclass and float
    cast_arguments:
    - caster: CONFIG.schema.Kinds
      field: parent
      unpack: true
    arguments:
      parent: {}
      child: 1.1
    assertions:
    - method: assertions.app.assert_equals
      expected:
        parent: any
        child: any
  - description: List and dict
    cast_arguments:
    - field: child
      caster: __builtins__.dict
    arguments:
      parent:
      - parent
      child:
        key_a: value_a
        key_b: value_b
    assertions:
    - method: assertions.app.assert_equals
      expected:
        parent: list
        child: dict
  - description: Tuple and nonetype
    cast_arguments:
    - caster: __builtins__.tuple
      field: parent
    arguments:
      parent:
      - parent
      child: null
    assertions:
    - method: assertions.app.assert_equals
      expected:
        parent: list
        child: nonetype
- function: main
  description: Combines values from a parent and child objects
  tests:
  - description: Undefined child and parent
    arguments: {}
    assertions:
    - method: assertions.app.assert_equals
      expected: []
  - description: Dictionary parent and child
    arguments:
      child:
        key_a: value_a
        key_b: value_child
      parent:
        key_b: value_b
        key_c: value_c
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - key_b: value_b
        key_c: value_c
      - key_a: value_a
        key_b: value_child
