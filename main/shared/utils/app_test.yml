todo:
- TODO: >
    Add timestamp logic; a time stamp for each operations. Either of these formats
    timestamp = [{operation_1: timestamp}, {operation_2: timestamp}]
    timestamp = {op1: timestamp, op2: timestamp}
- TODO: Adding the ability to log each operation


resources:
- https://stackoverflow.com/questions/55590343/asyncio-run-or-run-until-complete


globals:
  resources:
  - ${ROOT_DIR}/assertions/app.py


tests:
- function: get_function_parameters
  description: Returns the parameters of a function
  cast_arguments:
  - caster: test_resources.app.function_resource
    field: function
  tests:
  - description: Function with one parameter
    arguments:
      function: function_one_parameter
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - parameter_1
  - description: Function with two parameters
    arguments:
      function: function_two_parameters
    assertions:
    - method: assertions.app.assert_equals
      expected:
      - parameter_1
      - parameter_2
- function: process_arguments
  description: Returns arguments as a dataclass
  cast_arguments:
  - caster: test_resources.app.data_class_resource
    field: data_class
  cast_output:
  - caster: __builtins__.dict
  tests:
  - description: Undefined arguments
    arguments:
      locals: {}
      data_class: data_class
    assertions:
    - method: assertions.app.assert_equals
      expected:
        a: 0
        b: 0
        result: 0
  - description: Defined arguments
    arguments:
      locals:
        a: 1
        b: 2
      data_class: data_class
    assertions:
    - method: assertions.app.assert_equals
      expected:
        a: 1
        b: 2
        result: 0
- function: process_operations
  description: >
    Executes functions listed as operations in
    config files n times to process data
  tests:
  - cast_arguments:
    - caster: test_resources.app.functions_resource
      field: functions
    - caster: test_resources.app.Data_Class
      field: data
      unpack: true
    cast_output:
    - caster: dc.asdict
    tests:
    - description: Data object is a dataclass
      arguments:
        operations:
        - subtract
        data:
          a: 1
          b: 3
        functions: functions
      assertions:
      - method: assertions.app.assert_equals
        expected:
          a: 1
          b: 3
          result: -2
    - arguments:
        operations:
        - add
        data:
          a: 1
          b: 3
        functions: functions
      assertions:
      - method: assertions.app.assert_equals
        expected:
          a: 1
          b: 3
          result: 4
    - arguments:
        operations:
        - multiply
        data:
          a: 1
          b: 3
        functions: functions
      assertions:
      - method: assertions.app.assert_equals
        expected:
          a: 1
          b: 3
          result: 3
  - description: >
      Data argument is a dict
    cast_arguments:
    - caster: test_resources.app.functions_resource
      field: functions
    arguments:
      operations:
      - subtract
      data:
        a: 1
        b: 3
    assertions:
    - method: assertions.app.assert_equals
      expected:
        a: 1
        b: 3
        result: -2
- function: set_field_value
  description: >
    Set the value for a field (key of a dict
    or attribute of an object)
  tests:
  - description: Set value for key of a dict
    arguments:
      kind: dict
      data:
        key: value
      field: key
      value:  set_value
    assertions:
    - method: assertions.app.assert_equals
      expected:
        key: set_value
  - description: Set value for attribute of an object
    cast_arguments:
    - field: data
      caster: test_resources.app.data_resource
    arguments:
      kind: object
      data:
        a: 0
        b: 0
        result: 0
      field: result
      value:  -1
    cast_output:
    - caster: dc.asdict
    assertions:
    - method: assertions.app.assert_equals
      expected:
        a: 0
        b: 0
        result: -1
- function: is_coroutine
  description: Returns true if an object is a couroutine and false otherwise
  tests:
  - description: Undefined argument
    arguments: {}
    assertions:
    - method: assertions.app.assert_equals
      expected: false
  - description: Object is not a coroutine
    arguments:
      object: 1
    assertions:
    - method: assertions.app.assert_equals
      expected: False
  - description: Object is a coroutine
    cast_arguments:
    - caster: test_resources.app.coroutine_resource
      field: object
    arguments:
      object: 1
    assertions:
    - method: assertions.app.assert_equals
      expected: true
- function: get_task_from_event_loop
  description: Returns the output of a coroutine
  tests:
  - arguments:
      task: null
    assertions:
    - method: assertions.app.assert_equals
      expected: null
  - arguments:
      task: task
    assertions:
    - method: assertions.app.assert_equals
      expected: task
  - cast_arguments:
    - caster: test_resources.app.coroutine_resource
      field: task
    arguments:
      task: coroutine_task
    assertions:
    - method: assertions.app.assert_equals
      expected: coroutine_output
- function: get_parent_module
  description: Returns the location of a resource module's parent module
  tests:
  - arguments: {}
    assertions:
    - method: assertions.app.assert_equals
      expected: null
  - arguments:
      module: root/resources_folder_name/module.py
      resources_folder_name: resources_folder_name
    assertions:
    - method: assertions.app.assert_equals
      expected: root/module.py
  - arguments:
      module: root/resources_folder_name/module.py
      resources_folder_name: resources_folder_name
      parent_filename: parent.py
    assertions:
    - method: assertions.app.assert_equals
      expected: root/parent.py
- function: get_range_from_integer
  description: >
    Returns an iterable or range for an integer, sh`n`. If sh`n` is null
    returns a iterable of range 1
  tests:
  - arguments: {}
    assertions:
    - method: assertions.app.assert_type
      expected: range
    - method: assertions.app.assert_equals
      expected: 1
      field: stop
  - arguments:
      n: 2
    assertions:
    - method: assertions.app.assert_type
      expected: range
    - method: assertions.app.assert_equals
      expected: 2
      field: stop
  - cast_arguments:
    - field: n
      caster: test_resources.app.get_range_from_integer_resource
    arguments:
      n: 3
    assertions:
    - method: assertions.app.assert_type
      expected: range
    - method: assertions.app.assert_equals
      expected: 3
      field: stop
