TODO:
- more robust way of testing functions that create patches


help:
- https://stackoverflow.com/questions/9572833/using-break-in-a-list-comprehension


configurations:
  resources:
  - ${PYTEST_YAML_ROOT_DIR}/main/process/_patches_resources/app.py
  - ${PYTEST_YAML_ROOT_DIR}/assertions/app.py


tests:
- function: main
  description: >
    Patches an object within the module to test or modules used as resources
    during testing
  cast_arguments:
  - method: _patches_resources.app.get_module_wrapper
    field: module
  tests:
  - description: No defined patches
    arguments:
      patches: null
      module: ${PYTEST_YAML_ROOT_DIR}/main/process/_patches_resources/app.py
    assertions:
    - method: assertions.app.check_module
      field: module
      expected:
        location: ${PYTEST_YAML_ROOT_DIR}/main/process/_patches_resources/app.py
  - description: Patch a non-existing object using value method
    arguments:
      patches:
      - method: value
        value: patched_value
        route: .does_not_exist
      module: ${PYTEST_YAML_ROOT_DIR}/main/process/_patches_resources/app.py
    assertions:
    - method: assertions.app.check_module
      field: module
      expected:
        location: ${PYTEST_YAML_ROOT_DIR}/main/process/_patches_resources/app.py
    - method: assertions.app.check_equals
      field: module.does_not_exist
      expected: patched_value
  - description: Patch existing object using callable method
    arguments:
      patches:
      - method: callable
        value: callable_output
        route: add
      module: ${PYTEST_YAML_ROOT_DIR}/main/process/_patches_resources/app.py
    assertions:
    - method: assertions.app.check_module
      field: module
      expected:
        location: ${PYTEST_YAML_ROOT_DIR}/main/process/_patches_resources/app.py
    - method: assertions.app.check_function
      field: module.add
      expected:
        name: callable_patch
        location: ${PYTEST_YAML_ROOT_DIR}/main/process/patches.py
- function: pre_processing
  description: Returns patch model containing module and timestamp
  tests:
  - description: Undefined arguments
    arguments: {}
    assertions:
    - method: assertions.app.check_sns
      expected:
        route: null
        method: null
        module: null
        value: null
        do_nothing: False
    - method: assertions.app.check_type
      field: timestamp
      expected: float
  - description: Defined arguments
    arguments:
      patch:
        method: method
        value: value
        route: route
      module: module
    assertions:
    - method: assertions.app.check_sns
      expected:
        module: module
        value: value
        route: route
        method: method
        do_nothing: False
- function: get_patch_method
  description: Returns the method to use for patching
  tests:
  - description: Undefined arguments
    arguments: {}
    assertions:
    - method: assertions.app.check_sns
      expected:
        do_nothing: True
    - method: assertions.app.check_sns
      field: log
      expected:
        message: No patch method None found
        level: error
  - description: Value method
    arguments:
      method: value
      value: value
      timestamp: 0
    assertions:
    - method: assertions.app.check_sns
      expected:
        value: value
  - description: Callable method
    arguments:
      method: callable
      value: value
      timestamp: 0
    assertions:
    - method: assertions.app.check_sns
      expected: {}
    - method: assertions.app.check_function
      field: value
      expected:
        name: callable_patch
        location: ${PYTEST_YAML_ROOT_DIR}/main/process/patches.py
  - description: Side effect list method
    arguments:
      value:
      - a
      - b
      timestamp: 0
      method: side_effect_list
    assertions:
    - method: assertions.app.check_sns
      expected: {}
    - method: assertions.app.check_function
      field: value
      expected:
        name: side_effect_list_patch
        location: ${PYTEST_YAML_ROOT_DIR}/main/process/patches.py
  - description: Side effect dict method
    arguments:
      value:
        a: a
        b: b
      timestamp: 0
      method: side_effect_dict
    assertions:
    - method: assertions.app.check_sns
      expected: {}
    - method: assertions.app.check_function
      field: value
      expected:
        name: side_effect_dict_patch
        location: ${PYTEST_YAML_ROOT_DIR}/main/process/patches.py
  - description: Method does not exist
    arguments:
      method: method_does_not_exist
      value: value
      timestamp: 0
    assertions:
    - method: assertions.app.check_sns
      expected:
        do_nothing: True
    - method: assertions.app.check_sns
      field: log
      expected:
        message: No patch method method_does_not_exist found
        level: error
- function: do_nothing
  description: Returns a none type object
  tests:
  - description: Undefined arguments
    arguments:
      value: null
      timestamp: null
    assertions:
    - method: assertions.app.check_equals
      expected: null
  - description: Defined arguments
    arguments:
      value: value
      timestamp: timestamp
    assertions:
    - method: assertions.app.check_equals
      expected: null
- function: get_value_patch_method
  description: Returns a value patch
  tests:
  - description: Patch value is a string
    arguments:
      value: patch_value
    assertions:
    - method: assertions.app.check_equals
      expected: patch_value
  - description: Patch value is a integer
    arguments:
      value: 1
    assertions:
    - method: assertions.app.check_equals
      expected: 1
- function: get_callable_patch_method
  description: Returns callable patch
  assertions:
  - method: assertions.app.check_function
    expected:
      name: callable_patch
      location: ${PWD}/main/process/patches.py
  tests:
  - description: Returns a function
    arguments:
      value: value
      timestamp: timestamp
    assertions:
    # Use caster to call the patch and verify output
    - method: assertions.app.check_equals
      expected: value
      cast_output:
      - method: _patches_resources.app.get_patch_for_callable_cast_output
  - description: Returns the function `callable_patch`
    arguments:
      value: value
      timestamp: timestamp
    assertions:
    # Use caster to call the patch and verify output
    - method: assertions.app.check_equals
      expected: value
      cast_output:
      - method: _patches_resources.app.get_patch_for_callable_cast_output
  - description: Returns the value when the patch is called
    arguments:
      value: patch_value
      timestamp: timestamp
    assertions:
    # Use caster to call the patch and verify output
    - method: assertions.app.check_equals
      expected: patch_value
      cast_output:
      - method: _patches_resources.app.get_patch_for_callable_cast_output
- function: get_side_effect_list_patch_method
  description: Sets the patch for a side effect list
  assertions:
  - method: assertions.app.check_function
    expected:
      name: side_effect_list_patch
      location: ${PWD}/main/process/patches.py
  tests:
  - description: Return a side effect list patch
    arguments:
      value:
      - value_a
      - value_b
      - value_c
      timestamp: timestamp
    assertions:
    # Using a caster to call patch until
    # we get back to the first value
    - method: assertions.app.check_equals
      expected:
      - value_a
      - value_b
      - value_c
      - value_a
      cast_output:
      - method: _patches_resources.app.get_patch_for_side_effect_list_cast_output
  - description: Name of function should contain sh`side_effect_list_patch`
    arguments:
      value:
      - 0
      - 1
      timestamp: timestamp
    assertions:
    - method: assertions.app.check_equals
      expected:
      - 0
      - 1
      - 0
      cast_output:
      - method: _patches_resources.app.get_patch_for_side_effect_list_cast_output
- function: get_side_effect_dict_patch_method
  description: Sets the patch for a side effect dict
  assertions:
  - method: assertions.app.check_function
    expected:
      name: side_effect_dict_patch
      location: ${PWD}/main/process/patches.py
  tests:
  - description: Return a side effect dict patch
    arguments:
      value:
        key_0: value_0
        key_1: value_1
        key_2: value_2
      timestamp: timestamp
    assertions:
    - method: assertions.app.check_function_output
      expected:
        arguments:
        - key_0: null
        - key_1: null
        - key_2: null
        - key_3: value_3
        output:
        - key_0: value_0
        - key_1: value_1
        - key_2: value_2
        - key_3: value_3
  - description: Name of function should contain sh`side_effect_dict_patch`
    arguments:
      value:
        a: 2
        b: 1
        c: 0
      timestamp: timestamp
    assertions:
    # Using caster to call patch with the keys used to set it
    - method: assertions.app.check_function_output
      expected:
        arguments:
        - a: null
        - b: null
        - c: null
        - d: d
        output:
        - a: 2
        - b: 1
        - c: 0
        - d: d
- function: patch_module
  description: Returns a module with a patched object
  cast_arguments:
  - method: _patches_resources.app.get_module_wrapper
    field: module
  tests:
  - description: Undefined arguments
    arguments: {}
    assertions:
    - method: assertions.app.check_sns
      expected:
        module: null
  - description: Do nothing flag is true
    arguments:
      do_nothing: true
      module: ${PYTEST_YAML_ROOT_DIR}/main/process/_patches_resources/app.py
    assertions:
    - method: assertions.app.check_sns
      expected: {}
    - method: assertions.app.check_module
      field: module
      expected:
        location: ${PYTEST_YAML_ROOT_DIR}/main/process/_patches_resources/app.py
  - description: Patch object in module
    arguments:
      value: value
      route: route
      do_nothing: False
      module: ${PYTEST_YAML_ROOT_DIR}/main/process/_patches_resources/app.py
    assertions:
    - method: assertions.app.check_equals
      field: module.route
      expected: value
