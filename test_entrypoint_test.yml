TODO:
- Pass excluded functions and modules to coverage
- Move some logic to plugin.py so that all that is needed is to import function test_
- Is there a way to link these patterns with coverage


resources:
- &RESOURCE
  resource: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/resources/test_entrypoint/app.py
- &CHECKS
  resource: ${YAML_TESTING_FRAMEWORK_ROOT_DIR}/checks/app.py


tests:
- function: get_test_id
  description: >
    Returns the id for a test or creates one if the id does not exist.
  cast_arguments:
  - method: sns
    << : *RESOURCE
    field: val
    unpack: true
  tests:
  - arguments:
      val:
        id: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected: null
  - arguments:
      val:
        id: id_b
    checks:
    - method: check_equals
      << : *CHECKS
      expected: id_b
  - arguments:
      val:
        id: id_a
    checks:
    - method: check_equals
      << : *CHECKS
      expected: id_a
- function: get_yaml_tests
  description: >
    Returns a list of tests processed by the plugin or an empty list if no
    tests exists or were processed
  cast_arguments:
  - method: sns
    field: pytest
    unpack: true
    << : *RESOURCE
  tests:
  - description: Attribute is undefined
    arguments:
      pytest:
        yaml_tests: null
    checks:
    - method: check_equals
      << : *CHECKS
      expected: []
  - description: Attribute is defined
    arguments:
      pytest:
        yaml_tests: yaml_tests
    checks:
    - method: check_equals
      << : *CHECKS
      expected: yaml_tests